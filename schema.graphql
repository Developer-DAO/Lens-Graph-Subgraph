type Approval @entity {
  id: ID!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
}

type ApprovalForAll @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
}

type Dispatcher @entity {
  id: ID!
  address: String!
  canUseRelay: Boolean!
}

type ProfileStats @entity {
  id: ID!
  totalFollowers: BigInt!
  totalFollowing: BigInt!
  totalPosts: BigInt!
  totalComments: BigInt!
  totalMirrors: BigInt!
  totalPublications: BigInt!
  totalCollects: BigInt!
}

type NftImage @entity {
  id: ID!
  contractAddress: String!
  tokenId: String!
  url: String!
  chainId: BigInt!
  verified: Boolean!
}

type Media @entity {
  id: ID!
  url: String!
  width: BigInt
  height: BigInt
  size: BigInt
  mimeType: String
}

type MediaSet @entity {
  id: ID!
  original: Media!
  small: Media
  medium: Media
}

enum ProfileMedia {
  NftImage
  MediaSet
}

type Erc20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  address: String!
}

type ModuleFeeAmount @entity {
  id: ID!
  asset: Erc20!
  vaue: String!
}

type FeeFollowModuleSettings @entity {
  id: ID!
  contractAddress: String!
  amount: ModuleFeeAmount!
  recipient: String!
}

type ProfileFollowModuleSettings @entity {
  id: ID!
  contractAddress: String!
}

type RevertFollowModuleSettings @entity {
  id: ID!
  contractAddress: String!
}

enum FollowModule {
  FeeFollowModuleSettings
  ProfileFollowModuleSettings
  RevertFollowModuleSettings
}

type Attribute @entity {
  id: ID!
  displayType: String
  traitType: String
  key: String!
  value: String!
}

type Profile @entity {
  id: ID!
  name: String
  bio: String
  followNftAddress: String
  metadata: String
  handle: String!
  picture: ProfileMedia
  coverPicture: ProfileMedia
  onwnedBy: String!
  dispatcher: Dispatcher
  stats: ProfileStats
  followModule: FollowModule
  isDefault: Boolean
  attributes: [Attribute!]
  isFollowedByMe: Boolean
  isFollowingMe: Boolean
}

enum ReactionTypes {
  UPVOTE
  DOWNVOTE
}

type PublicationStats @entity {
  id: ID!
  totalAmountOfMirrors: BigInt!
  totalAmountOfCollects: BigInt!
  totalAmountOfComments: BigInt!
  totalUpvotes: BigInt!
  totalDownvotes: BigInt!
}

type Wallet @entity {
  id: ID!
  address: String!
  defaulProfile: Profile!
}

enum MetadataDisplayType {
  BigInt
  String
  String
}

type MetadataAttributeOutput @entity {
  id: ID!
  displayType: MetadataDisplayType
  traitType: String
  value: String
}

type MetadataOutput @entity {
  id: ID!
  name: String
  description: String
  content: String
  image: String
  cover: MediaSet
  media: [MediaSet!]!
  attributes: [MetadataAttributeOutput!]!
}



type ReactionFieldResolverRequest @entity {
  id: ID!
  profileId: BigInt
}


enum CollectModules {
  LimitedFeeCollectModule
  FeeCollectModule
  LimitedTimedFeeCollectModule
  TimedFeeCollectModule
  RevertCollectModule
  FreeCollectModule
}

type FreeCollectModuleSettings @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
  followerOnly: Boolean!
}

type FeeCollectModuleSettings @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
  amount: ModuleFeeAmount!
  recipient: String!
  referralFee: BigDecimal!
  followerOnly: Boolean!
}

type LimitedFeeCollectModule @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
  collectLimit: String!
  amount: ModuleFeeAmount!
  recipient: String!
  referralFee: BigDecimal!
  followerOnly: Boolean!
}

type LimitedTimedFeeCollectModuleSettings @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
  collectLimit: String!
  amount: ModuleFeeAmount!
  recipient: String!
  referralFee: BigDecimal!
  followerOnly: Boolean!
  endTimestamp: String!
}

type RevertCollectModuleSettings @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
}

type TimedFeeCollectModuleSettings @entity {
  id: ID!
  type: CollectModules!
  contractAddress: String!
  amount: ModuleFeeAmount!
  recipient: String!
  referralFee: BigDecimal!
  followerOnly: Boolean!
  endTimestamp: String!
}

enum ReferenceModules {
  FollowOnlyReferenceModule
}

type FollowOnlyReferenceModuleSettings @entity {
  id: ID!
  type: ReferenceModules!
  contractAddress: String!
}

type Mirror @entity {
  id: ID!
  profile: Profile!
  stats: PublicationStats!
  metadata: MetadataOutput!
  onChainContentURI: String!
  createdAt: String!
  appId: BigInt
  hidden: Boolean!
  collectNftAddress: String
  reaction: ReactionTypes
  hasCollectedByMe: Boolean!
}

type Post @entity {
  id: ID!
  profile: Profile!
  stats: PublicationStats!
  metadata: MetadataOutput!
  onChainContentURI: String!
  createdAt: String!
  appId: String
  hidden: Boolean!
  collectNftAddress: String
  collectedBy: Wallet
  reaction: ReactionTypes
  hasCollectedByMe: Boolean!
  mirrors: [ID!]!
}
type Comment @entity{
  id: ID!
  profile: Profile!
  stats: PublicationStats!
  metadata: MetadataOutput!
  onChainContentURI: String!
  createdAt: String!
  collectModule: CollectModule!
  referenceModule: ReferenceModule!
  appId: String!
  hidden: Boolean!
  collectNftAddress:contractAddress!
  mainPost:MainPostReference!
  commentOn:Publication
  firstComment:Comment
  collectedBy:Wallet
  reaction:ReactionTypes
  hasCollectedByMe: Boolean!
  mirrors:[ID!]!
}
