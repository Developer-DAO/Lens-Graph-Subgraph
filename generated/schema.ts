// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class Dispatcher extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispatcher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dispatcher must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dispatcher", id.toString(), this);
    }
  }

  static load(id: string): Dispatcher | null {
    return changetype<Dispatcher | null>(store.get("Dispatcher", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get canUseRelay(): boolean {
    let value = this.get("canUseRelay");
    return value!.toBoolean();
  }

  set canUseRelay(value: boolean) {
    this.set("canUseRelay", Value.fromBoolean(value));
  }
}

export class ProfileStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileStats", id.toString(), this);
    }
  }

  static load(id: string): ProfileStats | null {
    return changetype<ProfileStats | null>(store.get("ProfileStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalFollowers(): BigInt {
    let value = this.get("totalFollowers");
    return value!.toBigInt();
  }

  set totalFollowers(value: BigInt) {
    this.set("totalFollowers", Value.fromBigInt(value));
  }

  get totalFollowing(): BigInt {
    let value = this.get("totalFollowing");
    return value!.toBigInt();
  }

  set totalFollowing(value: BigInt) {
    this.set("totalFollowing", Value.fromBigInt(value));
  }

  get totalPosts(): BigInt {
    let value = this.get("totalPosts");
    return value!.toBigInt();
  }

  set totalPosts(value: BigInt) {
    this.set("totalPosts", Value.fromBigInt(value));
  }

  get totalComments(): BigInt {
    let value = this.get("totalComments");
    return value!.toBigInt();
  }

  set totalComments(value: BigInt) {
    this.set("totalComments", Value.fromBigInt(value));
  }

  get totalMirrors(): BigInt {
    let value = this.get("totalMirrors");
    return value!.toBigInt();
  }

  set totalMirrors(value: BigInt) {
    this.set("totalMirrors", Value.fromBigInt(value));
  }

  get totalPublications(): BigInt {
    let value = this.get("totalPublications");
    return value!.toBigInt();
  }

  set totalPublications(value: BigInt) {
    this.set("totalPublications", Value.fromBigInt(value));
  }

  get totalCollects(): BigInt {
    let value = this.get("totalCollects");
    return value!.toBigInt();
  }

  set totalCollects(value: BigInt) {
    this.set("totalCollects", Value.fromBigInt(value));
  }
}

export class NftImage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftImage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftImage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftImage", id.toString(), this);
    }
  }

  static load(id: string): NftImage | null {
    return changetype<NftImage | null>(store.get("NftImage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value!.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value!.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value!.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }
}

export class Media extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Media entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Media must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Media", id.toString(), this);
    }
  }

  static load(id: string): Media | null {
    return changetype<Media | null>(store.get("Media", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value!.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get width(): BigInt | null {
    let value = this.get("width");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set width(value: BigInt | null) {
    if (!value) {
      this.unset("width");
    } else {
      this.set("width", Value.fromBigInt(<BigInt>value));
    }
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get mimeType(): string | null {
    let value = this.get("mimeType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mimeType(value: string | null) {
    if (!value) {
      this.unset("mimeType");
    } else {
      this.set("mimeType", Value.fromString(<string>value));
    }
  }
}

export class MediaSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MediaSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MediaSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MediaSet", id.toString(), this);
    }
  }

  static load(id: string): MediaSet | null {
    return changetype<MediaSet | null>(store.get("MediaSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get original(): string {
    let value = this.get("original");
    return value!.toString();
  }

  set original(value: string) {
    this.set("original", Value.fromString(value));
  }

  get small(): string | null {
    let value = this.get("small");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set small(value: string | null) {
    if (!value) {
      this.unset("small");
    } else {
      this.set("small", Value.fromString(<string>value));
    }
  }

  get medium(): string | null {
    let value = this.get("medium");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set medium(value: string | null) {
    if (!value) {
      this.unset("medium");
    } else {
      this.set("medium", Value.fromString(<string>value));
    }
  }
}

export class Erc20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Erc20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Erc20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Erc20", id.toString(), this);
    }
  }

  static load(id: string): Erc20 | null {
    return changetype<Erc20 | null>(store.get("Erc20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class ModuleFeeAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModuleFeeAmount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleFeeAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleFeeAmount", id.toString(), this);
    }
  }

  static load(id: string): ModuleFeeAmount | null {
    return changetype<ModuleFeeAmount | null>(store.get("ModuleFeeAmount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get vaue(): string {
    let value = this.get("vaue");
    return value!.toString();
  }

  set vaue(value: string) {
    this.set("vaue", Value.fromString(value));
  }
}

export class FeeFollowModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeFollowModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeFollowModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeFollowModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): FeeFollowModuleSettings | null {
    return changetype<FeeFollowModuleSettings | null>(
      store.get("FeeFollowModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }
}

export class ProfileFollowModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProfileFollowModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileFollowModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileFollowModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): ProfileFollowModuleSettings | null {
    return changetype<ProfileFollowModuleSettings | null>(
      store.get("ProfileFollowModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }
}

export class RevertFollowModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RevertFollowModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RevertFollowModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RevertFollowModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): RevertFollowModuleSettings | null {
    return changetype<RevertFollowModuleSettings | null>(
      store.get("RevertFollowModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }
}

export class Attribute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Attribute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Attribute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Attribute", id.toString(), this);
    }
  }

  static load(id: string): Attribute | null {
    return changetype<Attribute | null>(store.get("Attribute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get displayType(): string | null {
    let value = this.get("displayType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set displayType(value: string | null) {
    if (!value) {
      this.unset("displayType");
    } else {
      this.set("displayType", Value.fromString(<string>value));
    }
  }

  get traitType(): string | null {
    let value = this.get("traitType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set traitType(value: string | null) {
    if (!value) {
      this.unset("traitType");
    } else {
      this.set("traitType", Value.fromString(<string>value));
    }
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class PublicationStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublicationStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublicationStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublicationStats", id.toString(), this);
    }
  }

  static load(id: string): PublicationStats | null {
    return changetype<PublicationStats | null>(
      store.get("PublicationStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAmountOfMirrors(): BigInt {
    let value = this.get("totalAmountOfMirrors");
    return value!.toBigInt();
  }

  set totalAmountOfMirrors(value: BigInt) {
    this.set("totalAmountOfMirrors", Value.fromBigInt(value));
  }

  get totalAmountOfCollects(): BigInt {
    let value = this.get("totalAmountOfCollects");
    return value!.toBigInt();
  }

  set totalAmountOfCollects(value: BigInt) {
    this.set("totalAmountOfCollects", Value.fromBigInt(value));
  }

  get totalAmountOfComments(): BigInt {
    let value = this.get("totalAmountOfComments");
    return value!.toBigInt();
  }

  set totalAmountOfComments(value: BigInt) {
    this.set("totalAmountOfComments", Value.fromBigInt(value));
  }

  get totalUpvotes(): BigInt {
    let value = this.get("totalUpvotes");
    return value!.toBigInt();
  }

  set totalUpvotes(value: BigInt) {
    this.set("totalUpvotes", Value.fromBigInt(value));
  }

  get totalDownvotes(): BigInt {
    let value = this.get("totalDownvotes");
    return value!.toBigInt();
  }

  set totalDownvotes(value: BigInt) {
    this.set("totalDownvotes", Value.fromBigInt(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wallet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wallet", id.toString(), this);
    }
  }

  static load(id: string): Wallet | null {
    return changetype<Wallet | null>(store.get("Wallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get defaulProfile(): string {
    let value = this.get("defaulProfile");
    return value!.toString();
  }

  set defaulProfile(value: string) {
    this.set("defaulProfile", Value.fromString(value));
  }
}

export class MetadataAttributeOutput extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MetadataAttributeOutput entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetadataAttributeOutput must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetadataAttributeOutput", id.toString(), this);
    }
  }

  static load(id: string): MetadataAttributeOutput | null {
    return changetype<MetadataAttributeOutput | null>(
      store.get("MetadataAttributeOutput", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get displayType(): string | null {
    let value = this.get("displayType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set displayType(value: string | null) {
    if (!value) {
      this.unset("displayType");
    } else {
      this.set("displayType", Value.fromString(<string>value));
    }
  }

  get traitType(): string | null {
    let value = this.get("traitType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set traitType(value: string | null) {
    if (!value) {
      this.unset("traitType");
    } else {
      this.set("traitType", Value.fromString(<string>value));
    }
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }
}

export class MetadataOutput extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetadataOutput entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetadataOutput must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetadataOutput", id.toString(), this);
    }
  }

  static load(id: string): MetadataOutput | null {
    return changetype<MetadataOutput | null>(store.get("MetadataOutput", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get content(): string | null {
    let value = this.get("content");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set content(value: string | null) {
    if (!value) {
      this.unset("content");
    } else {
      this.set("content", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get cover(): string | null {
    let value = this.get("cover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cover(value: string | null) {
    if (!value) {
      this.unset("cover");
    } else {
      this.set("cover", Value.fromString(<string>value));
    }
  }

  get media(): Array<string> {
    let value = this.get("media");
    return value!.toStringArray();
  }

  set media(value: Array<string>) {
    this.set("media", Value.fromStringArray(value));
  }

  get attributes(): Array<string> {
    let value = this.get("attributes");
    return value!.toStringArray();
  }

  set attributes(value: Array<string>) {
    this.set("attributes", Value.fromStringArray(value));
  }
}

export class ReactionFieldResolverRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReactionFieldResolverRequest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReactionFieldResolverRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReactionFieldResolverRequest", id.toString(), this);
    }
  }

  static load(id: string): ReactionFieldResolverRequest | null {
    return changetype<ReactionFieldResolverRequest | null>(
      store.get("ReactionFieldResolverRequest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt | null {
    let value = this.get("profileId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set profileId(value: BigInt | null) {
    if (!value) {
      this.unset("profileId");
    } else {
      this.set("profileId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FreeCollectModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FreeCollectModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FreeCollectModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FreeCollectModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): FreeCollectModuleSettings | null {
    return changetype<FreeCollectModuleSettings | null>(
      store.get("FreeCollectModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get followerOnly(): boolean {
    let value = this.get("followerOnly");
    return value!.toBoolean();
  }

  set followerOnly(value: boolean) {
    this.set("followerOnly", Value.fromBoolean(value));
  }
}

export class FeeCollectModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeCollectModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeCollectModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeCollectModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): FeeCollectModuleSettings | null {
    return changetype<FeeCollectModuleSettings | null>(
      store.get("FeeCollectModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get referralFee(): BigDecimal {
    let value = this.get("referralFee");
    return value!.toBigDecimal();
  }

  set referralFee(value: BigDecimal) {
    this.set("referralFee", Value.fromBigDecimal(value));
  }

  get followerOnly(): boolean {
    let value = this.get("followerOnly");
    return value!.toBoolean();
  }

  set followerOnly(value: boolean) {
    this.set("followerOnly", Value.fromBoolean(value));
  }
}

export class LimitedFeeCollectModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LimitedFeeCollectModule entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LimitedFeeCollectModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LimitedFeeCollectModule", id.toString(), this);
    }
  }

  static load(id: string): LimitedFeeCollectModule | null {
    return changetype<LimitedFeeCollectModule | null>(
      store.get("LimitedFeeCollectModule", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get collectLimit(): string {
    let value = this.get("collectLimit");
    return value!.toString();
  }

  set collectLimit(value: string) {
    this.set("collectLimit", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get referralFee(): BigDecimal {
    let value = this.get("referralFee");
    return value!.toBigDecimal();
  }

  set referralFee(value: BigDecimal) {
    this.set("referralFee", Value.fromBigDecimal(value));
  }

  get followerOnly(): boolean {
    let value = this.get("followerOnly");
    return value!.toBoolean();
  }

  set followerOnly(value: boolean) {
    this.set("followerOnly", Value.fromBoolean(value));
  }
}

export class LimitedTimedFeeCollectModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LimitedTimedFeeCollectModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LimitedTimedFeeCollectModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LimitedTimedFeeCollectModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): LimitedTimedFeeCollectModuleSettings | null {
    return changetype<LimitedTimedFeeCollectModuleSettings | null>(
      store.get("LimitedTimedFeeCollectModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get collectLimit(): string {
    let value = this.get("collectLimit");
    return value!.toString();
  }

  set collectLimit(value: string) {
    this.set("collectLimit", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get referralFee(): BigDecimal {
    let value = this.get("referralFee");
    return value!.toBigDecimal();
  }

  set referralFee(value: BigDecimal) {
    this.set("referralFee", Value.fromBigDecimal(value));
  }

  get followerOnly(): boolean {
    let value = this.get("followerOnly");
    return value!.toBoolean();
  }

  set followerOnly(value: boolean) {
    this.set("followerOnly", Value.fromBoolean(value));
  }

  get endTimestamp(): string {
    let value = this.get("endTimestamp");
    return value!.toString();
  }

  set endTimestamp(value: string) {
    this.set("endTimestamp", Value.fromString(value));
  }
}

export class RevertCollectModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RevertCollectModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RevertCollectModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RevertCollectModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): RevertCollectModuleSettings | null {
    return changetype<RevertCollectModuleSettings | null>(
      store.get("RevertCollectModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }
}

export class TimedFeeCollectModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TimedFeeCollectModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TimedFeeCollectModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TimedFeeCollectModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): TimedFeeCollectModuleSettings | null {
    return changetype<TimedFeeCollectModuleSettings | null>(
      store.get("TimedFeeCollectModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get referralFee(): BigDecimal {
    let value = this.get("referralFee");
    return value!.toBigDecimal();
  }

  set referralFee(value: BigDecimal) {
    this.set("referralFee", Value.fromBigDecimal(value));
  }

  get followerOnly(): boolean {
    let value = this.get("followerOnly");
    return value!.toBoolean();
  }

  set followerOnly(value: boolean) {
    this.set("followerOnly", Value.fromBoolean(value));
  }

  get endTimestamp(): string {
    let value = this.get("endTimestamp");
    return value!.toString();
  }

  set endTimestamp(value: string) {
    this.set("endTimestamp", Value.fromString(value));
  }
}

export class FollowOnlyReferenceModuleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FollowOnlyReferenceModuleSettings entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FollowOnlyReferenceModuleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FollowOnlyReferenceModuleSettings", id.toString(), this);
    }
  }

  static load(id: string): FollowOnlyReferenceModuleSettings | null {
    return changetype<FollowOnlyReferenceModuleSettings | null>(
      store.get("FollowOnlyReferenceModuleSettings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get mintedTo(): string {
    let value = this.get("mintedTo");
    return value!.toString();
  }

  set mintedTo(value: string) {
    this.set("mintedTo", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get picture(): string | null {
    let value = this.get("picture");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set picture(value: string | null) {
    if (!value) {
      this.unset("picture");
    } else {
      this.set("picture", Value.fromString(<string>value));
    }
  }

  get followModule(): string | null {
    let value = this.get("followModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set followModule(value: string | null) {
    if (!value) {
      this.unset("followModule");
    } else {
      this.set("followModule", Value.fromString(<string>value));
    }
  }

  get followModuleReturnData(): Bytes | null {
    let value = this.get("followModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set followModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("followModuleReturnData");
    } else {
      this.set("followModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get followNftUri(): string | null {
    let value = this.get("followNftUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set followNftUri(value: string | null) {
    if (!value) {
      this.unset("followNftUri");
    } else {
      this.set("followNftUri", Value.fromString(<string>value));
    }
  }

  get posts(): Array<string> {
    let value = this.get("posts");
    return value!.toStringArray();
  }

  set posts(value: Array<string>) {
    this.set("posts", Value.fromStringArray(value));
  }

  get comments(): Array<string> {
    let value = this.get("comments");
    return value!.toStringArray();
  }

  set comments(value: Array<string>) {
    this.set("comments", Value.fromStringArray(value));
  }

  get mirrors(): Array<string> {
    let value = this.get("mirrors");
    return value!.toStringArray();
  }

  set mirrors(value: Array<string>) {
    this.set("mirrors", Value.fromStringArray(value));
  }
}

export class Mirror extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mirror entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mirror must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mirror", id.toString(), this);
    }
  }

  static load(id: string): Mirror | null {
    return changetype<Mirror | null>(store.get("Mirror", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get referenceModule(): string {
    let value = this.get("referenceModule");
    return value!.toString();
  }

  set referenceModule(value: string) {
    this.set("referenceModule", Value.fromString(value));
  }

  get referenceModuleReturnData(): Bytes {
    let value = this.get("referenceModuleReturnData");
    return value!.toBytes();
  }

  set referenceModuleReturnData(value: Bytes) {
    this.set("referenceModuleReturnData", Value.fromBytes(value));
  }

  get profilePointed(): string {
    let value = this.get("profilePointed");
    return value!.toString();
  }

  set profilePointed(value: string) {
    this.set("profilePointed", Value.fromString(value));
  }

  get publicationPointed(): string {
    let value = this.get("publicationPointed");
    return value!.toString();
  }

  set publicationPointed(value: string) {
    this.set("publicationPointed", Value.fromString(value));
  }

  get collectedBy(): string | null {
    let value = this.get("collectedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectedBy(value: string | null) {
    if (!value) {
      this.unset("collectedBy");
    } else {
      this.set("collectedBy", Value.fromString(<string>value));
    }
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get contentUri(): string {
    let value = this.get("contentUri");
    return value!.toString();
  }

  set contentUri(value: string) {
    this.set("contentUri", Value.fromString(value));
  }

  get collectModule(): string | null {
    let value = this.get("collectModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectModule(value: string | null) {
    if (!value) {
      this.unset("collectModule");
    } else {
      this.set("collectModule", Value.fromString(<string>value));
    }
  }

  get collectModuleReturnData(): Bytes | null {
    let value = this.get("collectModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collectModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("collectModuleReturnData");
    } else {
      this.set("collectModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get referenceModule(): string | null {
    let value = this.get("referenceModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referenceModule(value: string | null) {
    if (!value) {
      this.unset("referenceModule");
    } else {
      this.set("referenceModule", Value.fromString(<string>value));
    }
  }

  get referenceModuleReturnData(): Bytes | null {
    let value = this.get("referenceModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referenceModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("referenceModuleReturnData");
    } else {
      this.set("referenceModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get collectedBy(): string | null {
    let value = this.get("collectedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectedBy(value: string | null) {
    if (!value) {
      this.unset("collectedBy");
    } else {
      this.set("collectedBy", Value.fromString(<string>value));
    }
  }

  get mirrors(): Array<string> | null {
    let value = this.get("mirrors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mirrors(value: Array<string> | null) {
    if (!value) {
      this.unset("mirrors");
    } else {
      this.set("mirrors", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Comment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Comment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Comment", id.toString(), this);
    }
  }

  static load(id: string): Comment | null {
    return changetype<Comment | null>(store.get("Comment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get onChainContentURI(): string {
    let value = this.get("onChainContentURI");
    return value!.toString();
  }

  set onChainContentURI(value: string) {
    this.set("onChainContentURI", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get mirrors(): Array<string> {
    let value = this.get("mirrors");
    return value!.toStringArray();
  }

  set mirrors(value: Array<string>) {
    this.set("mirrors", Value.fromStringArray(value));
  }

  get publication(): string {
    let value = this.get("publication");
    return value!.toString();
  }

  set publication(value: string) {
    this.set("publication", Value.fromString(value));
  }

  get referenceModule(): string | null {
    let value = this.get("referenceModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referenceModule(value: string | null) {
    if (!value) {
      this.unset("referenceModule");
    } else {
      this.set("referenceModule", Value.fromString(<string>value));
    }
  }

  get collectModule(): string {
    let value = this.get("collectModule");
    return value!.toString();
  }

  set collectModule(value: string) {
    this.set("collectModule", Value.fromString(value));
  }

  get profilePointed(): string {
    let value = this.get("profilePointed");
    return value!.toString();
  }

  set profilePointed(value: string) {
    this.set("profilePointed", Value.fromString(value));
  }

  get collectedBy(): string | null {
    let value = this.get("collectedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectedBy(value: string | null) {
    if (!value) {
      this.unset("collectedBy");
    } else {
      this.set("collectedBy", Value.fromString(<string>value));
    }
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class NFTContent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTContent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTContent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTContent", id.toString(), this);
    }
  }

  static load(id: string): NFTContent | null {
    return changetype<NFTContent | null>(store.get("NFTContent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get metaType(): string {
    let value = this.get("metaType");
    return value!.toString();
  }

  set metaType(value: string) {
    this.set("metaType", Value.fromString(value));
  }

  get animatedUrl(): string | null {
    let value = this.get("animatedUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set animatedUrl(value: string | null) {
    if (!value) {
      this.unset("animatedUrl");
    } else {
      this.set("animatedUrl", Value.fromString(<string>value));
    }
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractName(): string {
    let value = this.get("contractName");
    return value!.toString();
  }

  set contractName(value: string) {
    this.set("contractName", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get owners(): Array<string> {
    let value = this.get("owners");
    return value!.toStringArray();
  }

  set owners(value: Array<string>) {
    this.set("owners", Value.fromStringArray(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get originalContent(): string {
    let value = this.get("originalContent");
    return value!.toString();
  }

  set originalContent(value: string) {
    this.set("originalContent", Value.fromString(value));
  }

  get chainId(): string {
    let value = this.get("chainId");
    return value!.toString();
  }

  set chainId(value: string) {
    this.set("chainId", Value.fromString(value));
  }

  get collectionName(): string {
    let value = this.get("collectionName");
    return value!.toString();
  }

  set collectionName(value: string) {
    this.set("collectionName", Value.fromString(value));
  }

  get ercType(): string {
    let value = this.get("ercType");
    return value!.toString();
  }

  set ercType(value: string) {
    this.set("ercType", Value.fromString(value));
  }
}

export class ReservedClaimableHandle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReservedClaimableHandle entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReservedClaimableHandle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReservedClaimableHandle", id.toString(), this);
    }
  }

  static load(id: string): ReservedClaimableHandle | null {
    return changetype<ReservedClaimableHandle | null>(
      store.get("ReservedClaimableHandle", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value!.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get expiry(): string {
    let value = this.get("expiry");
    return value!.toString();
  }

  set expiry(value: string) {
    this.set("expiry", Value.fromString(value));
  }
}

export class ClaimableHandles extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimableHandles entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimableHandles must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimableHandles", id.toString(), this);
    }
  }

  static load(id: string): ClaimableHandles | null {
    return changetype<ClaimableHandles | null>(
      store.get("ClaimableHandles", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get canClaimFreeTextHandle(): boolean {
    let value = this.get("canClaimFreeTextHandle");
    return value!.toBoolean();
  }

  set canClaimFreeTextHandle(value: boolean) {
    this.set("canClaimFreeTextHandle", Value.fromBoolean(value));
  }

  get claimableHandles(): Array<string> {
    let value = this.get("claimableHandles");
    return value!.toStringArray();
  }

  set claimableHandles(value: Array<string>) {
    this.set("claimableHandles", Value.fromStringArray(value));
  }
}

export class TransactionReceipt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionReceipt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionReceipt must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionReceipt", id.toString(), this);
    }
  }

  static load(id: string): TransactionReceipt | null {
    return changetype<TransactionReceipt | null>(
      store.get("TransactionReceipt", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get contractAddress(): string | null {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string | null) {
    if (!value) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromString(<string>value));
    }
  }

  get transactionIndex(): i32 {
    let value = this.get("transactionIndex");
    return value!.toI32();
  }

  set transactionIndex(value: i32) {
    this.set("transactionIndex", Value.fromI32(value));
  }

  get root(): string | null {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set root(value: string | null) {
    if (!value) {
      this.unset("root");
    } else {
      this.set("root", Value.fromString(<string>value));
    }
  }

  get gasUsed(): string {
    let value = this.get("gasUsed");
    return value!.toString();
  }

  set gasUsed(value: string) {
    this.set("gasUsed", Value.fromString(value));
  }

  get logsBloom(): string {
    let value = this.get("logsBloom");
    return value!.toString();
  }

  set logsBloom(value: string) {
    this.set("logsBloom", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value!.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get confirmations(): i32 {
    let value = this.get("confirmations");
    return value!.toI32();
  }

  set confirmations(value: i32) {
    this.set("confirmations", Value.fromI32(value));
  }

  get cumulativeGasUsed(): string {
    let value = this.get("cumulativeGasUsed");
    return value!.toString();
  }

  set cumulativeGasUsed(value: string) {
    this.set("cumulativeGasUsed", Value.fromString(value));
  }

  get effectiveGasPrice(): string {
    let value = this.get("effectiveGasPrice");
    return value!.toString();
  }

  set effectiveGasPrice(value: string) {
    this.set("effectiveGasPrice", Value.fromString(value));
  }

  get byzantium(): boolean {
    let value = this.get("byzantium");
    return value!.toBoolean();
  }

  set byzantium(value: boolean) {
    this.set("byzantium", Value.fromBoolean(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value!.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}
